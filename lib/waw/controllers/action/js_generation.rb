module Waw
  class ActionController < ::Waw::Controller
    
    # Eigen-class methods
    class << self

      # Returns known controllers
      def controllers
        @controllers ||= []
      end
        
      # When ActionController is inherited, we keep a reference
      # for later code generation and add a start hook
      def inherited(child)
        controllers << child
        Waw.add_start_hook(JSGeneration.new) if controllers.size==1
      end

    end # class << self
    
    class JSGeneration
      
      # Caalback required by Waw  
      def run
        puts "Running js hook"
        return unless Waw.config.code_at_startup
        folder = File.join(Waw.root_folder, 'public', 'js')
        puts "Generating in #{folder}"
        raise WawConfigurationError, 'Code generation expects a public/js folder' unless File.directory?(folder)
        file = File.join(folder, 'waw_generated.js')
        File.open(file, 'w') do |buffer|
          generate_js(buffer)
        end
      end  
      
      # Generate the javascript code for installed action
      # controllers
      def generate_js(buffer)
        buffer << <<-EOF
        /* This file is automatically generated by Waw. Any edit will probably be lost
         * next time the application is started. */

        EOF
        generate_js_messages(buffer)
        ActionController.controllers.sort{|c1, c2| c1.class.name <=> c2.class.name}.each do |controller|
          buffer << <<-EOF
            /*
             * Actions contributed by #{controller.class}
             */
          EOF
          controller.actions.keys.sort{|k1, k2| k1.to_s <=> k2.to_s}.each do |name|
            action = controller.actions[name]
            generate_js_for_action('/webserv', action, buffer)
          end
        end
      end
    
      def generate_js_messages(buffer)
        if Waw.resources.has_resource?(:messages)
          buffer << "/* Messages, from waw.resources.messages */\n"
          messages = {}
          Waw.resources.messages.each do |name, value|
            messages[name] = value 
          end  
          buffer << "var messages = new Array();\n"
          messages.keys.sort{|k1, k2| k1.to_s <=> k2.to_s}.each do |name|
            value = messages[name]
            buffer << "messages['#{name}'] = \"#{value}\";\n"    
          end
        end
      end
    
      def generate_js_for_action(path, action, buffer)
        buffer << <<-THEEND
        function #{action.public_id}(request_data, form) {
          $.ajax({type: "POST", url: "#{path}/#{action.public_id}", data: request_data, dataType: "json",
            error: function(data) {
        		  window.location = '/feedback?mkey=server_error'
        		},
        		success: function(data) {
              #{action.routing.generate_js_routing(action, 18)}
        		}
        	});
        	return false;
        }  
        THEEND
      end
      
    end # class JSGeneration
  end # class ActionController
end # module Waw